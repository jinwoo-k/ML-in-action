= 12장 FP(Frequent Pattern)-성장 알고리즘으로 빈발 아이템 집합 찾기
* 연관검색어와 같은 곳에서 효과적으로 빈발 아이템 집합을 찾는 것이 필요하다.
* FP-성장 알고리즘은 이전장에 다룬 어프라이어리 알고리즘으로부터 파생됐고, FP-트리라는 데이터 집합을 이용하며 더 빠른 속도를 갖는다.
* FP-성장 알고리즘은 아래 두개의 기본적인 접근 방법을 사용한다.
# FP-트리 구축
# FP-트리를 이용해 빈발 아이템 집합 마이닝

== 12.1 FP-트리 : 데이터 집합을 부호화하는 효과적인 방법
* 특징
** 장점 : 일반적으로 어프라이어리보다 빠르다
** 단점 : 구현하기 어려우며, 일부 데이터 집합에서는 성능이 떨어진다.
** 활용 : 명목형 값
* FP-트리는 일반 트리와 비슷하지만 유사한 아이템을 연결하는 링크를 추가로 갖는다.

.FP-트리를 생성하는데 사용된 샘플 트랜잭션 데이터 집합
[cols=2*,options=header]
|===
|TID
|트랜잭션에 있는 아이템

|001
|r, z, h, j, p

|002
|z, y, x, w, v, u, t, s

|003
|z

|004
|r, x, n, o, s

|005
|y, r, x, z, q, t, p

|006
|y, z, x, e, q, s, t, m
|===

.Table 1. 의 데이터를 이용해 구축한 FP-트리 예제 (최소 지지도 3)
image::imgs/12_1_1.png[,200]

== 12.2 FP-트리 구축하기

=== 12.2.1 FP-트리 데이터 구조 생성하기

.FP-트리 클래스 정의
[source,python]
----
class treeNode:
    def __init__(self, nameValue, numOccur, parentNode):
        self.name = nameValue
        self.count = numOccur
        self.nodeLink = None
        self.parent = parentNode      # needs to be updated
        self.children = {}

    def inc(self, numOccur):
        self.count += numOccur

    def disp(self, ind = 1):
        print '  '*ind, self.name, ' ', self.count
        for child in self.children.values():
            child.disp(ind + 1)

rootNode = treeNode('pyramid', 9, None)
rootNode.children['eye'] = treeNode('eye', 13, None)
rootNode.disp()
# pyramid 9
#   eye 13

rootNode.children['phoenix'] = treeNode('phoenix', 3, None)
rootNode.disp()
# pyramid 9
#   eye 13
#   phoenix 3
----

== 12.2.2 FP-트리 구축하기
* Figure 1 에 보이는 FP-트리 외에 각 유형의 첫번째 사례를 가리키는 헤더 테이블이 존재하며, 이를 통해 원소들에 빠르게 접근 가능하다.

.헤더 테이블을 포함하는 FP-트리
image::imgs/12_2_1.png[,300]

* 트랜잭션 데이터 집합에서 최소지지도 이하인 원소를 제거 한 후 각 트랜잭션 내부에서 원소의 순서를 빈발수를 기준으로 내림차순 정렬한다.

.빈발하지 않은 원소 제거 및 빈발수 기준 재정렬
[cols=2*,options=header]
|===
|TID
|트랜잭션에 있는 아이템
|필터링과 정렬된 트랜잭션

|001
|r, z, h, j, p
|z, r

|002
|z, y, x, w, v, u, t, s
|z, x, y, s, t

|003
|z
|z

|004
|r, x, n, o, s
|x, s, r

|005
|y, r, x, z, q, t, p
|z, x, y, r, t

|006
|y, z, x, e, q, s, t, m
|z, x, y, s, t
|===

.트리를 빌드해 나가는 과정
image::imgs/12_2_2.png[,400]

.FP-트리 생성 코드
[source,python]
----
def createTree(dataSet, minSup=1):  # create FP-tree from dataset but don't mine
    headerTable = {}
    # go over dataSet twice
    for trans in dataSet:   # first pass counts frequency of occurance
        for item in trans:
            headerTable[item] = headerTable.get(item, 0) + dataSet[trans]   # TODO check result
    for k in headerTable.keys():  # remove items not meeting minSup
        if headerTable[k] < minSup:
            del(headerTable[k])
    freqItemSet = set(headerTable.keys())
    # print 'freqItemSet: ',freqItemSet
    if len(freqItemSet) == 0: return None, None  #if no items meet min support -->get out
    for k in headerTable:
        headerTable[k] = [headerTable[k], None] #reformat headerTable to use Node link
    # print 'headerTable: ',headerTable
    retTree = treeNode('Null Set', 1, None) # create tree
    for tranSet, count in dataSet.items():  # go through dataset 2nd time
        localD = {}
        for item in tranSet:  #put transaction items in order
            if item in freqItemSet:
                localD[item] = headerTable[item][0]
        if len(localD) > 0:
            orderedItems = [v[0] for v in sorted(localD.items(), key=lambda p: p[1], reverse=True)]
            updateTree(orderedItems, retTree, headerTable, count)#populate tree with ordered freq itemset
    return retTree, headerTable #return tree and header table

def updateTree(items, inTree, headerTable, count):
    if items[0] in inTree.children:#check if orderedItems[0] in retTree.children
        inTree.children[items[0]].inc(count) #incrament count
    else:   #add items[0] to inTree.children
        inTree.children[items[0]] = treeNode(items[0], count, inTree)
        if headerTable[items[0]][1] == None: #update header table
            headerTable[items[0]][1] = inTree.children[items[0]]
        else:
            updateHeader(headerTable[items[0]][1], inTree.children[items[0]])
    if len(items) > 1:  # call updateTree() with remaining ordered items
        updateTree(items[1::], inTree.children[items[0]], headerTable, count)

def updateHeader(nodeToTest, targetNode):   #this version does not use recursion
    while (nodeToTest.nodeLink != None):    #Do not use recursion to traverse a linked list!
        nodeToTest = nodeToTest.nodeLink
    nodeToTest.nodeLink = targetNode

def loadSimpDat():
    simpDat = [['r', 'z', 'h', 'j', 'p'],
               ['z', 'y', 'x', 'w', 'v', 'u', 't', 's'],
               ['z'],
               ['r', 'x', 'n', 'o', 's'],
               ['y', 'r', 'x', 'z', 'q', 't', 'p'],
               ['y', 'z', 'x', 'e', 'q', 's', 't', 'm']]
    return simpDat

def createInitSet(dataSet):
    retDict = {}
    for trans in dataSet:
        retDict[frozenset(trans)] = 1
    return retDict

ds = createInitSet(loadSimpDat())
tree, headTable = createTree(ds, 3)
tree.disp()
# Null Set   1
#  x   1
#    s   1
#      r   1
#  z   5
#    x   3
#      y   3
#        s   2
#          t   2
#        r   1
#          t   1
#    r   1
----

== 12.3 FP-트리로 빈발 아이템 집합 마이닝 하기
. FP-트리로부터 기본 패턴 조건들을 구함
. 기본 패턴 조건을 가지고 FP-트리 조건을 구축한다.
. 트리가 하나의 아이템만을 포함할 때까지 1, 2단계를 재귀적으로 반복한다.

=== 12.3.1 기본 패턴 조건 추출하기
* 이전에 구했던 헤더 테이블과 트리를 이용해 사전 경로(prefix path)를 추출한다.

.빈발 아이템에 대한 사전 경로
[cols=2*,options=header]
|===
|빈발 아이템
|사전 경로

|z
|{}5

|r
|{x,s}1, {z,x,y}1, {z}1

|x
|{z}3, {}1

|y
|{z,x}3

|s
|{z,x,y}2, {x}1

|t
|{z,x,y,s}2, {z,x,y,r}1
|===

.사전경로를 생성하는 함수
[source,python]
----
def ascendTree(leafNode, prefixPath): #ascends from leaf node to root
    if leafNode.parent != None:
        prefixPath.append(leafNode.name)
        ascendTree(leafNode.parent, prefixPath)

def findPrefixPath(treeNode): #treeNode comes from header table
    condPats = {}
    while treeNode != None:
        prefixPath = []
        ascendTree(treeNode, prefixPath)
        if len(prefixPath) > 1:
            condPats[frozenset(prefixPath[1:])] = treeNode.count
        treeNode = treeNode.nodeLink
    return condPats

ds = createInitSet(loadSimpDat())
tree, headTable = createTree(ds, 3)
tree.disp()

print findPrefixPath(headTable['r'][1])
----

=== 12.3.2 FP-트리 조건 생성하기
[source,scala]
----
def mineTree(headerTable, minSup, prefix, accFreqItemList):
    items = [v[0] for v in sorted(headerTable.items(), key=lambda p: p[1])]#(sort header table)
    for item in items:  #start from bottom of header table
        newFreqSet = prefix.copy()
        newFreqSet.add(item)
        accFreqItemList.append(newFreqSet)
        subPrefix = findPrefixPath(headerTable[item][1])
        myCondTree, myHead = createTree(subPrefix, minSup)

        if myHead != None: #3. mine cond. FP-tree
            print 'conditional tree for: ', newFreqSet
            myCondTree.disp(1)
            mineTree(myHead, minSup, newFreqSet, accFreqItemList)

freqItems = []
mineTree(headTable, 3, set([]), freqItems)
print freqItems

# conditional tree for:  set(['y'])
#    Null Set   1
#      x   3
#        z   3
# conditional tree for:  set(['y', 'z'])
#    Null Set   1
#      x   3
# conditional tree for:  set(['s'])
#    Null Set   1
#      x   3
# conditional tree for:  set(['t'])
#    Null Set   1
#      y   3
#        x   3
#          z   3
# conditional tree for:  set(['x', 't'])
#    Null Set   1
#      y   3
# conditional tree for:  set(['z', 't'])
#    Null Set   1
#      y   3
#        x   3
# conditional tree for:  set(['x', 'z', 't'])
#    Null Set   1
#      y   3
# conditional tree for:  set(['x'])
#    Null Set   1
#      z   3
# [set(['y']), set(['y', 'x']), set(['y', 'z']), set(['y', 'x', 'z']), set(['s']), set(['x', 's']), set(['t']), set(['y', 't']), set(['x', 't']), set(['y', 'x', 't']), set(['z', 't']), set(['y', 'z', 't']), set(['x', 'z', 't']), set(['y', 'x', 'z', 't']), set(['r']), set(['x']), set(['x', 'z']), set(['z'])]
----
