= 11장 어프라이어리 알고리즘으로 연관 분석 하기
* 마트에서 함께 구매한 아이템들을 살펴보면 구매행동에 대한 생각을 읽을 수 있고, 이를 통해 상품진열, 마케팅 등에 활용 할 수 있다.
* 연관분석(association analysis)이나나 연관규칙학습(association rule learning)을 이용하기에 무차별대입 (brute-force) 방법은 너무 느리다.

== 11.1 연관 분석 (Association analysis)
* 특징
** 장점 : 코드를 작성하기 쉽다.
** 단점 : 큰 데이터 집합에서 느리다.
** 활용 : 수치형, 명목형

.식료품 상점의 간단한 트랜잭션 목록
[cols=2*,options=header]
|===
|트랜잭션 번호
|아이템

|0
|두유, 상추

|1
|상추, 기저귀, 와인, 근대

|2
|두유, 기저귀, 와인, 오렌지 주스


|3
|상추, 두유, 기저귀, 와인


|4
|상추, 두유, 기저귀, 오렌지 주스
|===

* 연관 분석
** 빈발 아이템 집합 (frequent item sets) : 자주 발생하는 아이템들 집합
** 연관 규칙 (association rule) : 두 아이템 간 관계에는 강조가 존재한다고 제안

** 지지도(support)
*** 빈발 아이템을 추추하기 위한 기준으로 아이템 집합에 포함된 데이터 집합의 비율
*** 테이블1에서 {두유}의 지지도는 4/5이며, {두유,기저귀}의 지지도는 3/5이다.
*** 최소 지지도를 지정해 그보다 높은 아이템 목록을 추출할 수 있다.

** 신뢰도(confidence)
*** 연관 규칙을 정의하기 위한 기준으로 {기저귀} -> {와인} 과 같은 규칙을 정의
*** {기저귀} -> {와인} 의 신뢰도는 지지도{기저귀, 와인} / 지지도{기저귀} 이다. 즉 (3/5)/(4/5) 로 3/4, 75% 이다.

* 수많은 트랜잭션, 아이템 집합으로부터 위의 지지도, 신뢰도를 구하는 작업은 너무 오래걸린다. > 이제 다룰 어프라이어리 이론을 통해 연관 규칙을 얻기 위한 계산 횟수를 줄여보자.

== 11.2 어프라이어리 이론
* 빈발 아이템 집합과 아이템들 간의 연관 규칙을 찾는데 이용
* 기존의 방식으로 지지도를 구할때 N개의 아이템이 있는 경우 조합 수가 2^N^-1 이 되며, N이 100인 경우 1.26*10^30^ 만큼 커진다.
* 어프라이어리 이론은 가능한 한 흥미로운 아이템 집합 수를 줄인다.
** {0, 1}이 빈발한다면 {0}, {1} 역시 빈발할거라는 가정 > 대우로 {0} 이 빈발하지 않는다면 0을 포함한 다른 집합 역시 빈발하지 않을꺼다.

== 11.3 어프라이어리 알고리즘으로 빈발 아이템 집합 찾기
* 연관분석은 빈발 아이템 집합을 먼저 찾고, 이후 빈발 아이템들 간의 연관 규칙을 찾는다.
* 어프라이어리 알고리즘은 빈발 아이템 찾기 위한 알고리즘이다.
. 원소가 하나인 모든 부분집합에 대해 지지도를 구하고, 기준치 이하인 지지도를 갖는 원소는 모두 버린다.
. 살아남은 원소들을 대상으로 원소가 두개인 부분집합을 만들어 이에 대한 지지도를 구하고, 기준치 이하인 지지도를 갖는 원소는 모두 버린다.
. 살아남은 원소가 없을 때 까지 반복한다.

=== 11.3.1 후보 아이템 집합 생성
[source,python]
----
def loadDataSet():
    return [[1, 3, 4], [2, 3, 5], [1, 2, 3, 5], [2, 5]]

def createC1(dataSet):
    C1 = []
    for transaction in dataSet:
        for item in transaction:
            if not [item] in C1:
                C1.append([item])
    C1.sort()
    return map(frozenset, C1)   # use frozen set so we can use it as a key in a dict

def scanD(D, Ck, minSupport):
    ssCnt = {}
    for tid in D:
        for can in Ck:
            if can.issubset(tid):
                if not ssCnt.has_key(can): ssCnt[can]=1
                else: ssCnt[can] += 1
    numItems = float(len(D))
    retList = []
    supportData = {}
    for key in ssCnt:
        support = ssCnt[key]/numItems
        if support >= minSupport:
            retList.insert(0,key)
        supportData[key] = support
    return retList, supportData

dataSet = loadDataSet()
c1 = createC1(dataSet)

print(c1)
# [frozenset([1]), frozenset([2]), frozenset([3]), frozenset([4]), frozenset([5])]

print(scanD(dataSet, c1, 0.7))
# ([frozenset([3]), frozenset([2]), frozenset([5])], {frozenset([4]): 0.25, frozenset([5]): 0.75, frozenset([2]): 0.75, frozenset([3]): 0.75, frozenset([1]): 0.5})
----

=== 1.3.2 전체 어프라이어리 알고리즘 사용
[source,python]
----
# 새로운 Ck 를 만드는 함수, 각 집합을 frozenset 만들어 원소 정럴 순서를 없앰
# [{0}, {1}, {2}] -> [{0,1}, {0,2}, {1,2}]
# [{0,1}, {0,2}, {1,2}] -> [{0,1,2}]]
def aprioriGen(Lk, k):  # creates Ck
    retList = []
    lenLk = len(Lk)
    for i in range(lenLk):
        for j in range(i+1, lenLk):
            L1 = list(Lk[i])[:k-2]
            L2 = list(Lk[j])[:k-2]
            L1.sort()
            L2.sort()

            if L1 == L2:    # if first k-2 elements are equal
                retList.append(Lk[i] | Lk[j])   # set union
    return retList

def apriori(dataSet, minSupport = 0.5):
    C1 = createC1(dataSet)
    D = map(set, dataSet)
    L1, supportData = scanD(D, C1, minSupport)
    L = [L1]
    k = 2
    while (len(L[k-2]) > 0):
        Ck = aprioriGen(L[k-2], k)
        Lk, supK = scanD(D, Ck, minSupport) # scan DB to get Lk
        supportData.update(supK)
        L.append(Lk)
        k += 1
    return L, supportData

l, support = apriori(dataSet)
print l
# [[frozenset([1]), frozenset([3]), frozenset([2]), frozenset([5])], [frozenset([1, 3]), frozenset([2, 5]), frozenset([2, 3]), frozenset([3, 5])], [frozenset([2, 3, 5])], []]

print support
# {frozenset([5]): 0.75, frozenset([3]): 0.75, frozenset([2, 3, 5]): 0.5, frozenset([1, 2]): 0.25, frozenset([1, 5]): 0.25, frozenset([3, 5]): 0.5, frozenset([4]): 0.25, frozenset([2, 3]): 0.5, frozenset([2, 5]): 0.75, frozenset([1]): 0.5, frozenset([1, 3]): 0.5, frozenset([2]): 0.75}

l, support = apriori(dataSet, 0.7)
print l
# [[frozenset([3]), frozenset([2]), frozenset([5])], [frozenset([2, 5])], []]

print support
# {frozenset([5]): 0.75, frozenset([3]): 0.75, frozenset([3, 5]): 0.5, frozenset([4]): 0.25, frozenset([2, 3]): 0.5, frozenset([2, 5]): 0.75, frozenset([1]): 0.5, frozenset([2]): 0.75}
----

== 11.4 빈발 아이템 집합으로 연관 규칙 마이닝 하기
* 연관 규칙에서 두유 -> 상추 와 상추 -> 두유는 다르며, 선행조건(antecedent) -> 결과(consequent) 로 표현한다.
* P -> H 의 신뢰도(confidence) 는 지지도(P∪H)/지지도(P) 로 정의된다.
* 각 빈발 아이템 집합에 대한 연관 규칙 생성
** 어떤 규칙이 최소 신뢰도를 만족하지 못할 경우 해당 규칙의 부분집합 역시 최소 신뢰도를 만족하지 못한다 > 규칙의 개수를 줄임!
** 예) {0,1,2} -> {3} 이 최소 신뢰도 이하인 경우 선행조건 {0,1,2} 의 모든 부분집합 역시 최소 신뢰도를 충족하지 못한다.
* 어프라이어리 알고리즘과 동일하지만 우측집합(결과-consequence)의 원소가 하나부터 시작해 늘려간다. (단게별-level wise 접근법)

[source,python]
----
def generateRules(L, supportData, minConf=0.7): # supportData is a dict coming from scanD
    bigRuleList = []
    for i in range(1, len(L)):  # only get the sets with two or more items
        for freqSet in L[i]:
            H1 = [frozenset([item]) for item in freqSet]
            if (i > 1):
                rulesFromConseq(freqSet, H1, supportData, bigRuleList, minConf)
            else:
                calcConf(freqSet, H1, supportData, bigRuleList, minConf)
    return bigRuleList


# H1 -> freqSet : frozenset([2,5]), H : [frozenset([2]), frozenset([5])]
# H2 -> freqSet : frozenset([2,3,5]), H : [frozenset([2,3]), frozenset([2,5]),frozenset([3,5])]
def calcConf(freqSet, H, supportData, brl, minConf=0.7):
    prunedH = [] #create new list to return
    for conseq in H:
        # confidence(P->H): support(PuH)/support(P)
        conf = supportData[freqSet]/supportData[freqSet-conseq] #calc confidence
        if conf >= minConf:
            print freqSet-conseq,'-->',conseq,'conf:',conf
            brl.append((freqSet-conseq, conseq, conf))
            prunedH.append(conseq)
    return prunedH

# freqSet : frozenset([2,3,5])
# H1 : [frozenset([2]), frozenset([3]), frozenset([5])]
def rulesFromConseq(freqSet, H, supportData, brl, minConf=0.7):
    m = len(H[0])
    if (len(freqSet) > (m + 1)): # try further merging (make H2)
        # [frozenset([2,3]), frozenset([2,5]),frozenset([3,5])]
        Hmp1 = aprioriGen(H, m+1)   # create Hm+1 new candidates
        Hmp1 = calcConf(freqSet, Hmp1, supportData, brl, minConf)
        if (len(Hmp1) > 1):    #need at least two sets to merge
            rulesFromConseq(freqSet, Hmp1, supportData, brl, minConf)

print generateRules(l, support, 0.7)
# [(frozenset([1]), frozenset([3]), 1.0), (frozenset([5]), frozenset([2]), 1.0), (frozenset([2]), frozenset([5]), 1.0)]

print generateRules(l, support, 0.5)
#[(frozenset([3]), frozenset([1]), 0.6666666666666666), (frozenset([1]), frozenset([3]), 1.0), (frozenset([5]), frozenset([2]), 1.0), (frozenset([2]), frozenset([5]), 1.0), (frozenset([3]), frozenset([2]), 0.6666666666666666), (frozenset([2]), frozenset([3]), 0.6666666666666666), (frozenset([5]), frozenset([3]), 0.6666666666666666), (frozenset([3]), frozenset([5]), 0.6666666666666666), (frozenset([5]), frozenset([2, 3]), 0.6666666666666666), (frozenset([3]), frozenset([2, 5]), 0.6666666666666666), (frozenset([2]), frozenset([3, 5]), 0.6666666666666666)]
----

== 11.5 예제 : 국회 투표 패턴 알아보기
* 스마트 투표 프로젝트(project vote smart)의 공개 API를 이용해 투표 기록에서 연관 규칙 찾기를 수행한다.

=== 11.5.1 수집 : 국회 투표 기록에 대한 트랜잭션 데이터 집합 구축
.법안과 해당 법안의 투표결과를 얻기 위한 메서드 정의
[source,python]
----
from time import sleep
from votesmart import votesmart
votesmart.apikey = 'a7fa40adec6f4a77178799fae4441030'

#votesmart.apikey = 'get your api key first'
def getActionIds():
    actionIdList = []; billTitleList = []
    fr = open('recent20bills.txt')
    for line in fr.readlines():
        billNum = int(line.split('\t')[0])
        try:
            billDetail = votesmart.votes.getBill(billNum) #api call
            for action in billDetail.actions:
                # house : United States House of Representatives (하원)
                # passgae : 통과, amendment vote : 개정투표
                if action.level == 'House' and \
                (action.stage == 'Passage' or action.stage == 'Amendment Vote'):
                    actionId = int(action.actionId)
                    print 'bill: %d has actionId: %d' % (billNum, actionId)
                    actionIdList.append(actionId)
                    billTitleList.append(line.strip().split('\t')[1])
        except:
            print "problem getting bill %d" % billNum
        sleep(1)                                      #delay to be polite
    return actionIdList, billTitleList
----

.정치인+법안 별 투표 현황 정리 (연관분석을 위한 기호화)
[source,python]
----
def getTransList(actionIdList, billTitleList): #this will return a list of lists containing ints
    itemMeaning = ['Republican', 'Democratic']#list of what each item stands for
    for billTitle in billTitleList:#fill up itemMeaning list
        itemMeaning.append('%s -- Nay' % billTitle)
        itemMeaning.append('%s -- Yea' % billTitle)
    transDict = {}#list of items in each transaction (politician)
    voteCount = 2
    for actionId in actionIdList:
        sleep(3)
        print 'getting votes for actionId: %d' % actionId
        try:
            voteList = votesmart.votes.getBillActionVotes(actionId)
            for vote in voteList:
                if not transDict.has_key(vote.candidateName):
                    transDict[vote.candidateName] = []
                    if vote.officeParties == 'Democratic':
                        transDict[vote.candidateName].append(1)
                    elif vote.officeParties == 'Republican':
                        transDict[vote.candidateName].append(0)
                if vote.action == 'Nay':
                    transDict[vote.candidateName].append(voteCount)
                elif vote.action == 'Yea':
                    transDict[vote.candidateName].append(voteCount + 1)
        except:
            print "problem getting actionId: %d" % actionId
        voteCount += 2
    return transDict, itemMeaning

transDict, itemMeaning = getTransList(actionIdList[:2], billTitles[:2])
for key in transDict.keys():
    print transDict[key]
# [1,2,5] -> 민주당, 첫번째 법안 반대, 두번째 법안 찬성
# [1,2,4] -> 민주당, 첫번째 법안 반대, 두번째 법안 반대
# [0,3,4] -> 공화당, 첫번째 법안 찬성, 두번째 법안 반대
# ...
----

=== 11.5.1 검사 : 국회 투표 기록의 연관 규칙
.투표 기록의 연관 규칙
[source,python]
----
transDict, itemMeaning = getTransList(actionIdList, billTitles)
dataSet = [transDict[key] for key in transDict.keys()]
l, support = apriori(dataSet, 0.3)
# todo add to result

rules = generateRules(l, support, 0.99)
# todo add to result
----

== 11.6 예제: 독버섯과 유사한 속성 찾기
* 주의사항! : 독이 있는 공통속성에 포함돼 이지 않다고 해서 독이 없다고 단정지을 순 없다!
.독이 있는 버섯을 먹지 않기 위해 UCI 버섯 데이터 집합을 이용해 독버섯의 공통적인 속성 찾기
[source,python]
----
mushDataSet = [line.split() for line in open('mushroom.dat').readlines()]
l, support = apriori(mushDataSet, 0.3)

for i in range(len(l) - 1, 0, -1):
    for item in l[i]:
        if item.intersection('2'):
            print item, support[item]
----
